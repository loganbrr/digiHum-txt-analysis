sorted_data <- data[order(sapply(data, extract_date))]
extract_date <- function(block) {
# Extract date using regex
dates <- regmatches(block, regexpr("\\w+ \\d{1,2}, \\d{4}|\\w+ \\d{1,2} \\d{4}", block))
if(length(dates) > 0) {
# Convert date to standard format
return(as.Date(dates[1], format="%B %d, %Y"))
} else {
# Return a far future date if no date is found
return(as.Date("9999-01-01"))
}
}
# Sort blocks by extracted dates
sorted_data <- data[order(sapply(data, extract_date))]
# Application Deadline Data
data <- c(
~~McKinsey Consulting Analyst~~
# Application Deadline Data
data <- c(
~~McKinsey Consulting Analyst~~
# Application Deadline Data
data <- c(
~~McKinsey Consulting Analyst~~
knitr::opts_chunk$set(echo = TRUE)
df <- read_rds(https://github.com/jbisbee1/DS1000_F2023/raw/main/Lectures/2_Intro_to_R/data/sc_debt.Rds)
df <- read_rds("https://github.com/jbisbee1/DS1000_F2023/raw/main/Lectures/2_Intro_to_R/data/sc_debt.Rds")
df <- read_rds("https://github.com/jbisbee1/DS1000_F2023/raw/main/Lectures/2_Intro_to_R/data/sc_debt.Rds")
knitr::opts_chunk$set(echo = TRUE)
df <- read_rds("https://github.com/jbisbee1/DS1000_F2023/raw/main/Lectures/2_Intro_to_R/data/sc_debt.Rds")
df <- read_rds("https://github.com/jbisbee1/DS1000_F2023/raw/main/Lectures/2_Intro_to_R/data/sc_debt.Rds")
df %>%
mutate(avg_avg_sat = mean(sat_avg,na.rm = TRUE )) %>%
select(avg_avg_sat, sat_avg)
View(df)
df %>%
mutate(avg_avg_sat = mean(sat_avg,na.rm = TRUE )) %>%
select(avg_avg_sat, sat_avg)
df %>%
mutate(avg_avg_sat = mean(sat_avg,na.rm = TRUE )) %>%
select(avg_avg_sat, sat_avg)
library(tidyverse)
df <- read_rds("https://github.com/jbisbee1/DS1000_F2023/raw/main/Lectures/2_Intro_to_R/data/sc_debt.Rds")
df %>%
mutate(avg_avg_sat = mean(sat_avg,na.rm = TRUE )) %>%
select(avg_avg_sat, sat_avg)
## Example using summarize()
df %>%
summarize(avg_avg_sat = mean(sat_avg,na.rm=T))
df %>%
mutate(avg_avg_sat = mean(sat_avg,na.rm = TRUE )) %>%
select(avg_avg_sat, sat_avg)
## Example using summarize()
df %>%
summarize(avg_avg_sat = mean(sat_avg,na.rm=T))
df %>%
filter(adm_rate < .1)
df %>%
filter(adm_rate < .1)
df %>%
filter(adm_rate < .1)
summarize(avg_sat_selective = mean(sat_avg,na.rm=T))
df %>%
filter(adm_rate < .1)
summarize(avg_sat_selective = mean(sat_avg,na.rm=T))
df %>%
mutate(avg_avg_sat = mean(sat_avg,na.rm = TRUE )) %>%
select(avg_avg_sat, sat_avg)
## Example using summarize()
df %>%
summarize(avg_avg_sat = mean(sat_avg,na.rm=T))
df %>%
filter(adm_rate < .1)
summarize(avg_sat_selective = mean(sat_avg,na.rm=T))
df %>%
filter(adm_rate < .1) %>%
summarize(avg_sat_selective = mean(sat_avg,na.rm=T))
df %>%
mutate(avg_avg_sat = mean(sat_avg,na.rm = TRUE )) %>%
select(avg_avg_sat, sat_avg)
## Example using summarize()
df %>%
summarize(avg_avg_sat = mean(sat_avg,na.rm=T))
df %>%
filter(adm_rate < .1) %>%
summarize(avg_sat_selective = mean(sat_avg,na.rm=T))
df %>%
filter(adm_rate >= .1)
summarize(avg_sat_nonselective = mean(sat_avg,na.rm=T))
df %>%
filter(adm_rate < .1) %>%
summarize(avg_sat_selective = mean(sat_avg,na.rm=T))
df %>%
filter(adm_rate >= .1)%>%
summarize(avg_sat_nonselective = mean(sat_avg,na.rm=T))
df %>%
group_by(selective) %>%
summarize(sat_avg = mean(sat_avg,na.rm=T))
df %>%
mutate(Sel_3levels = ifelse(adm_rate > .5, "Not selective".
df <- df %>%
mutate(sel_3levels = ifelse(adm_rate > .5, "Not selective".
df %>%
ggplot(aes(x = adm_rate, y = sat_avg))
df %>%
ggplot(aes(x = adm_rate, y = sat_avg)) +
geom_point()
df %>%
ggplot(aes(x = adm_rate, y = sat_avg)) +
geom_point() +
geom_smooth(method = 'lm') +
geom_text()
df %>%
ggplot(aes(x = adm_rate, y = sat_avg)) +
geom_point() +
geom_smooth(method = 'lm') +
geom_text(size_2)
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse) # Load tidyverse
df <- read_rds("sc_debt.rds") # Load the dataset
require(tidyverse) # Load tidyverse
df <- readRDS("sc_debt.rds") # Load the dataset
require(tidyverse) # Load tidyverse
df <- read_rds("sc_debt.rds") # Load the dataset
require(tidyverse) # Load tidyverse
df <- read_rds("https://github.com/jbisbee1/DS1000_F2023/raw/main/Lectures/2_Intro_to_R/data/sc_debt.Rds") # Load the dataset
require(tidyverse) # Load tidyverse
setwd("/Users/logan/Desktop/vandy/DS\ 1000/Week\ 2")
df <- read_rds(sc_debt.rds) # Load the dataset
View(df)
View(df)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse) # Load tidyverse
df <- read_rds("../data/sc_debt.rds") # Load the dataset
require(tidyverse) # Load tidyverse
df <- read_rds("../data/sc_debt.rds") # Load the dataset
View(df)
View(df)
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) # Select the school name, the admission rate, and the state
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) # Select the school name, the admission rate, and the state
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) # Select the school name, the admission rate, and the state
filter(adm_rate) > 0
df %>%
arrange(adm_rate) >0 %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) # Select the school name, the admission rate, and the state
df %>%
arrange(adm_rate) > 0 %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) # Select the school name, the admission rate, and the state
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate) > 0
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate) > 0
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0)
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) # Get rid of schools with zero admission rate since impossible
mutate(low_adm_rate = min(adm_rate)
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) # Get rid of schools with zero admission rate since impossible
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) # Get rid of schools with zero admission rate since impossible
filter(adm_rate == 1)
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) %>% # Get rid of schools with zero admission rate since impossible
filter(adm_rate == 1)
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) %>% # Get rid of schools with zero admission rate since impossible
filter(adm_rate = [1])
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) %>% # Get rid of schools with zero admission rate since impossible
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) # Get rid of schools with zero admission rate since impossible
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) # Get rid of schools with zero admission rate since impossible
head(1)
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) # Get rid of schools with zero admission rate since impossible
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) # Get rid of schools with zero admission rate since impossible
#Print the lowest admission rate and the state it is in
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) # Get rid of schools with zero admission rate since impossible
print((instnm if (min(adm_rate) > 0 'is in' 'and has the lowest admission rate of', (min(adm_rate) > 0))
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) %>% # Get rid of schools with zero admission rate since impossible
print((instnm if (min(adm_rate) > 0 'is in' 'and has the lowest admission rate of', (min(adm_rate) > 0))
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) %>% # Get rid of schools with zero admission rate since impossible
print((instnm when (min(adm_rate) > 0 'is in' 'and has the lowest admission rate of', (min(adm_rate) > 0))
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) %>% # Get rid of schools with zero admission rate since impossible
print((instnm == (min(adm_rate) > 0 'is in' 'and has the lowest admission rate of', (min(adm_rate) > 0))
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) %>% # Get rid of schools with zero admission rate since impossible
print((instnm == (min(adm_rate) > 0)) 'is in' 'and has the lowest admission rate of', (min(adm_rate) > 0))
df %>%
arrange(desc(sat_avg) %>% # arrange by SAT scores in descending order
select() %>% # Select the school name and SAT score
print() # Print the first X rows
df %>%
arrange(df, desc(sat_avg)) %>% # arrange by SAT scores in descending order
select() %>% # Select the school name and SAT score
print() # Print the first X rows
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) %>% # Get rid of schools with zero admission rate since impossible
#Print the instnm, adm_rate, and stabbr of lowest admission
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) # Get rid of schools with zero admission rate since impossible
#Print the instnm, adm_rate, and stabbr of lowest admission
df %>%
arrange(df, desc(sat_avg)) %>% # arrange by SAT scores in descending order
select() %>% # Select the school name and SAT score
print() # Print the first X rows
df %>%
arrange(df, desc(sat_avg)) %>% # arrange by SAT scores in descending order
select(instnm, sat_avg) %>% # Select the school name and SAT score
print() # Print the first X rows
df %>%
arrange(df, desc(sat_avg)) %>% # arrange by SAT scores in descending order
select(instnm, sat_avg) %>% # Select the school name and SAT score
print(head[10]) # Print the first X rows
df %>%
arrange(df, desc(sat_avg)) %>% # arrange by SAT scores in descending order
select(instnm, sat_avg) %>% # Select the school name and SAT score
print(head(10)) # Print the first X rows
df %>%
arrange(desc(sat_avg)) %>% # arrange by SAT scores in descending order
select(instnm, sat_avg) %>% # Select the school name and SAT score
print(head(10)) # Print the first X rows
df %>%
arrange(desc(sat_avg)) %>% # arrange by SAT scores in descending order
select(instnm, sat_avg) %>% # Select the school name and SAT score
print(head(10)) # Print the first X rows
df %>%
arrange(desc(sat_avg)) %>% # arrange by SAT scores in descending order
select(instnm, sat_avg) %>% # Select the school name and SAT score
(head(10)) # Print the first X rows
df %>%
arrange(desc(sat_avg)) %>% # arrange by SAT scores in descending order
select(instnm, sat_avg) %>% # Select the school name and SAT score
head(10)) # Print the first X rows
df %>%
arrange(desc(sat_avg)) %>% # arrange by SAT scores in descending order
select(instnm, sat_avg) %>% # Select the school name and SAT score
head(10) # Print the first X rows
df %>%
arrange(desc(md_earn_wne_p6)) %>% # arrange by earnings in descending order
select(instnm, md_earn_wne_p6, stabbr) # select the school name and earnings and the state
head(1)
df %>%
arrange(desc(md_earn_wne_p6)) %>% # arrange by earnings in descending order
select(instnm, md_earn_wne_p6, stabbr) %>% # select the school name and earnings and the state
head(1)
df %>%
arrange(desc(md_earn_wne_p6)) %>% # arrange by earnings in descending order
select(instnm, md_earn_wne_p6, stabbr) %>% # select the school name and earnings and the state
head(1)
df %>%
arrange(desc(md_earn_wne_p6)) %>% # arrange by earnings in descending order
select(instnm, md_earn_wne_p6, stabbr) %>% # select the school name and earnings and the state
head(1)
df %>%
arrange(desc(md_earn_wne_p6)) %>% # arrange by earnings in descending order
select(instnm, md_earn_wne_p6, stabbr) %>% # select the school name and earnings and the state
head(1)
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) # Get rid of schools with zero admission rate since impossible
head(1)
df %>%
arrange(adm_rate) %>% # Arrange by the admission rate
select(instnm, adm_rate, stabbr) %>% # Select the school name, the admission rate, and the state
filter(adm_rate > 0) %>% # Get rid of schools with zero admission rate since impossible
head(1)
df %>%
arrange(desc(sat_avg)) %>% # arrange by SAT scores in descending order
select(instnm, sat_avg) %>% # Select the school name and SAT score
head(10) # Print the first X rows
df %>%
filter(max(md_earn_wne_p6)) %>% # Filter to the school identified above
select(instnm, sat_avg) # select the school name and the SAT score
df %>%
arrange(desc(md_earn_wne_p6)) %>% # arrange by earnings in descending order
select(instnm, md_earn_wne_p6, stabbr) %>% # select the school name and earnings and the state
head(1)
df %>%
filter(md_earn_wne_p6 == 120400) %>% # Filter to the school identified above
select(instnm, sat_avg) # select the school name and the SAT score
df %>%
filter(md_earn_wne_p6 == 120400) %>% # Filter to the school identified above
select(instnm, sat_avg) # select the school name and the SAT score
df %>%
group_by(stabbr) %>% # Calculate state-by-state with group_by()
summarise(, # Summarise the average SAT
) # Summarise the average earnings
df %>%
group_by(stabbr) %>% # Calculate state-by-state with group_by()
summarise(sat_avg, # Summarise the average SAT
md_earn_wne_p6) # Summarise the average earnings
df %>%
group_by(stabbr) %>% # Calculate state-by-state with group_by()
summarise( # Summarise the average SAT
) # Summarise the average earnings
df %>%
group_by(stabbr) %>% # Calculate state-by-state with group_by()
summarise(
avg_SAT = mean(sat_avg, na.rm = TRUE),  # Calculate average SAT score
median_earnings = median(md_earn_wne_p6, na.rm = TRUE)  # Calculate median earnings
)
df %>%
group_by(stabbr) %>% # Calculate state-by-state with group_by()
summarise(
sat_avg_state = mean(sat_avg, na.rm = TRUE),  # Calculate the average SAT score
earnings_avg_state = median(md_earn_wne_p6, na.rm = TRUE)  # Calculate the average earnings
)
df %>%
ggplot(aes(x = sat_avg,y = md_earn_wne_p6)) +  # Build the plot with SAT scores on the x-axis and earnings on the y-axis
geom_point() # Add the points
df %>%
ggplot(aes(x = sat_avg,y = md_earn_wne_p6)) +  # Build the plot with SAT scores on the x-axis and earnings on the y-axis
geom_point() +  # Add  points
geom_smooth(method = "lm", se = FALSE, color = "blue") #Create line of best fit
df %>%
ggplot(aes(x = sat_avg,y = md_earn_wne_p6)) +  # Build the plot with SAT scores on the x-axis and earnings on the y-axis
geom_point() +  # Add  points
geom_smooth(method = "lm", se = FALSE, color = 'blue') #Create line of best fit
df %>%
ggplot(aes(x = sat_avg,y = md_earn_wne_p6)) +  # Build the plot with SAT scores on the x-axis and earnings on the y-axis
geom_point() +  # Add  points
geom_smooth(method = "lm", se = FALSE) #Create line of best fit
df %>%
ggplot(aes(x = sat_avg,y = md_earn_wne_p6)) +  # Build the plot with SAT scores on the x-axis and earnings on the y-axis
geom_point() +  # Add  points
geom_smooth(method = "lm") #Create line of best fit
df %>%
ggplot(aes(x = sat_avg,y = md_earn_wne_p6)) +  # Build the plot with SAT scores on the x-axis and earnings on the y-axis
geom_point() +  # Add  points
geom_smooth(method = "lm", se = FALSE, color = 'blue') #Create line of best fit
df %>%
ggplot(aes(x = sat_avg,y = md_earn_wne_p6)) +  # Build the plot with SAT scores on the x-axis and earnings on the y-axis
geom_point() +  # Add  points
geom_smooth(method = "lm") #Create line of best fit
df %>%
ggplot(aes(x = sat_avg,y = md_earn_wne_p6)) +  # Build the plot with SAT scores on the x-axis and earnings on the y-axis
geom_point() +  # Add  points
geom_smooth(method = "lm", se = FALSE, color = 'blue') #Create line of best fit
df %>%
ggplot(aes(x = sat_avg,y = md_earn_wne_p6)) +  # Build the plot with SAT scores on the x-axis and earnings on the y-axis
geom_point() +  # Add  points
geom_smooth(method = "lm") #Create line of best fit
df %>%
group_by(stabbr) %>% # Group data by stabbr with group_by()
summarise(
sat_avg_state = mean(sat_avg, na.rm = TRUE),  # Calculate the average SAT
earnings_avg_state = median(md_earn_wne_p6, na.rm = TRUE)  # Calculate the average earnings
)
df %>%
group_by(stabbr) %>% # Group data by stabbr with group_by()
summarise(
sat_avg_state = mean(sat_avg, na.rm = T),  # Calculate the average SAT
earnings_avg_state = median(md_earn_wne_p6, na.rm = T)  # Calculate the average earnings
)
df %>%
ggplot(aes(x = sat_avg,y = md_earn_wne_p6)) +  # Build the plot with SAT scores on the x-axis and earnings on the y-axis
geom_point() +  # Add  points
geom_smooth(method = "lm") #Create line of best fit
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
df <- read_rds("../data/MI2020_ExitPoll.rds") # Load the dataset
require(tidyverse)
df <- read_rds("../data/MI2020_ExitPoll.rds") # Load the dataset
View(df)
require(tidyverse)
MI_raw <- read_rds("../data/MI2020_ExitPoll.rds") # Load the dataset
View(df)
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
MI_raw <- read_rds("../data/MI2020_ExitPoll.rds") # Load the dataset
glimpse(MI_raw)
#Glimpse creates a table with all columns open to read
glimpse(MI_raw)
#Summary creates
summary(MI_raw %>% select(SENMI20, PRSMI20, WEIGHT))
#Glimpse creates a table with all columns open to read
glimpse(MI_raw)
#Summary creates
summary(MI_raw %>% select(SENMI20,PRSMI20,WEIGHT))
#Glimpse creates a table with all columns open to read
glimpse(MI_raw) %>%
#Summary creates
summary(MI_raw %>% select(SENMI20,PRSMI20,WEIGHT))
#Glimpse creates a table with all columns open to read
glimpse(MI_raw)
#Summary creates
summary(MI_raw %>% select(SENMI20,PRSMI20,WEIGHT))
#Loading dataset from Git repository
require(tidyverse)
library(haven)
MI_raw <- read_rds("../data/MI2020_ExitPoll.rds")
#Glimpse creates a table with all columns open to read
glimpse(MI_raw)
#Summary creates
summary(MI_raw %>% select(SENMI20,PRSMI20,WEIGHT)) #debug needed here
#Count creates
MI_raw %>%
count(AGE10)
install.packages("haven")
install.packages("haven")
knitr::opts_chunk$set(echo = TRUE)
#Glimpse creates a table with all columns open to read
glimpse(MI_raw)
#Glimpse creates a table with all columns open to read
glimpse(MI_raw)
#Glimpse creates a table with all columns open to read
glimpse(MI_raw)
#Glimpse creates a table with all columns open to read
glimpse(MI_raw)
#Loading dataset from Git repository and requiring
require(tidyverse)
MI_raw <- read_rds("../data/MI2020_ExitPoll.rds")
#Glimpse creates a table with all columns open to read
glimpse(MI_raw)
#Summary creates
summary(MI_raw %>% select(SENMI20,PRSMI20,WEIGHT)) #debug needed here
#Loading dataset from Git repository and requiring
require(tidyverse)
require(haven)
MI_raw <- read_rds("../data/MI2020_ExitPoll.rds")
#Glimpse creates a table with all columns open to read
glimpse(MI_raw)
#Summary creates
summary(MI_raw %>% select(SENMI20,PRSMI20,WEIGHT)) #debug needed here
#Count creates
MI_raw %>%
count(AGE10)
summary(MI_raw 5.5 select(LALVOTERID,SEX,AGE10,PARTYID,LGBT,QLT20))
summary(MI_raw %>% select(LALVOTERID,SEX,AGE10,PARTYID,LGBT,QLT20))
setwd("~/Desktop/fed-data")
setwd("~/Desktop/fed-data")
return(cleaned_text)
which wd
wd
pwd
anothertest.R
source("~/Desktop/fed-data/anothertest.R")
source("~/Desktop/fed-data/anothertest.R")
getwd()
source("~/Desktop/fed-data/anothertest.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/test.R")
source("~/Desktop/fed-data/text-analysis.R")
source("~/Desktop/fed-data/text-analysis.R")
source("~/Desktop/fed-data/text-analysis.R")
source("~/Desktop/fed-data/text-analysis.R")
